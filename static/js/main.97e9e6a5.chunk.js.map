{"version":3,"sources":["components/chessboard/BoardSquare.js","components/chessboard/BoardLabel.js","components/chessboard/ChessBoard.js","components/Draggable.js","components/Layout.js","components/Utils.js","components/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["BoardSquare","event","props","this","onDrop","data","dataTransfer","getData","preventDefault","setState","hovered","isFree","state","isHovered","markup","listClasses","concat","join","react_default","a","createElement","className","bind","onDragEnter","onDragLeave","onDragOver","React","Component","BoardLabel","value","ChessBoard","i","j","renderLabel","renderSquare","alpha","split","nums","chessboard_BoardLabel","key","row","cells","symbols","SEPARATOR","getMarkup","EMPTY_CELL","chessboard_BoardSquare","code","classes","isBlack","push","toUpperCase","match","children","renderCell","SELECTED_CELL","WHITE_QUEEN_KNIGHT","BLACK_PAWN","Draggable","setData","transport","onDragStart","_this$props","Object","objectWithoutProperties","assign","draggable","Layout","kids","Children","toArray","c1","c2","c3","c4","c5","id","toChess","x","y","GameBoard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","ready","finished","knightPos","pawnPos","message","strings","MSG_INITIAL","animate","assertThisInitialized","pieces","emptyRow","Array","emptyTable","fill","path","forEach","pos","toConsumableArray","addPieces","separator","tmp","slice","item","symbol","_this2","pawn","busy","MSG_KNIGHT_WALKING","length","moveKnightTo","apply","shift","then","setTimeout","MSG_THE_END","x0","y0","_this3","Promise","resolve","reject","knight","hasMoved","_this4","changes","checkPath","start","end","_this5","hasKnight","hasPawn","MSG_PLEASE_WAIT","fetchPath","response","json","drawPath","JSON","parse","catch","err","MSG_EXCEPTION","MSG_DROP_THE_OTHER","url","request","Request","fetch","coords","pop","map","s","toLowerCase","parseInt","indexOf","toCartezian","MSG_START_ANIMATION","isBusy","isReady","isFinished","generateTableData","Layout_Layout","components_chessboard_ChessBoard","Draggable_Draggable","type","onClick","reset","App","src_components_GameBoard","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.97e9e6a5.chunk.js","sourcesContent":["import React from \"react\";\r\nclass BoardSquare extends React.Component {\r\n  onDrop(event) {\r\n    const props = this.props,\r\n      onDrop = props && props.onDrop,\r\n      data = event.dataTransfer && event.dataTransfer.getData(\"text\");\r\n\r\n    event.preventDefault();\r\n    this.setState({ hovered: false }, () => onDrop && onDrop(data));\r\n  }\r\n  onDragOver(event) {\r\n    const props = this.props,\r\n      isFree = props && props.isFree;\r\n\r\n    if (isFree) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n  onDragLeave(event) {\r\n    this.setState({ hovered: false });\r\n  }\r\n  onDragEnter(event) {\r\n    this.setState({ hovered: true });\r\n  }\r\n  render() {\r\n    const props = this.props,\r\n      state = this.state,\r\n      isHovered = state && state.hovered,\r\n      markup = props && props.markup,\r\n      listClasses = []\r\n        .concat([\"sq\"], markup || [])\r\n        .concat(isHovered ? [\"hovered\"] : [])\r\n        .join(\" \");\r\n\r\n    return (\r\n      <div\r\n        className={listClasses}\r\n        onDrop={this.onDrop.bind(this)}\r\n        onDragEnter={this.onDragEnter.bind(this)}\r\n        onDragLeave={this.onDragLeave.bind(this)}\r\n        onDragOver={this.onDragOver.bind(this)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardSquare;\r\n","import React from 'react';\r\nclass BoardLabel extends React.Component {\r\n  render () {\r\n    const props = this.props,\r\n          value = (props && props.value) || ' ';\r\n\r\n    return <div className=\"lbl\">{value}</div>\r\n  }\r\n}\r\n\r\nexport default BoardLabel;\r\n","import React from 'react';\r\nimport BoardSquare from './BoardSquare';\r\nimport BoardLabel from './BoardLabel';\r\nimport './ChessBoard.css';\r\n\r\nclass ChessBoard extends React.Component {\r\n  static symbols = {\r\n   SEPARATOR: \" \",\r\n   EMPTY_CELL: \"-\",\r\n   SELECTED_CELL: \"X\",\r\n   WHITE_QUEEN_KNIGHT: \"QN1\",\r\n   BLACK_PAWN: \"P2\"\r\n }\r\n  renderCell(i, j) {\r\n    if(i===0 || i===9 || j===0 || j===9){\r\n      return this.renderLabel(i, j)\r\n    }else{\r\n      return this.renderSquare(i, j);\r\n    }\r\n  }\r\n  renderLabel(i, j) {\r\n    const alpha=\" abcdefgh \".split(''),\r\n          nums = \" 87654321 \".split(''),\r\n          value = (i===0 || i===9) ? alpha[j] : nums[i];\r\n\r\n    return <BoardLabel key={`L${i}x${j}}`} value={value} />\r\n  }\r\n  renderSquare(i, j) {\r\n    const props = this.props,\r\n          data = props && props.data,\r\n          row = data && data[i-1],\r\n          cells = row && row.split(ChessBoard.symbols.SEPARATOR),\r\n          markup = this.getMarkup(cells && cells[j-1], i, j),\r\n          isFree = cells && cells[j-1] && cells[j-1] === ChessBoard.symbols.EMPTY_CELL;\r\n\r\n    return <BoardSquare key={`C${i}x${j}}`} isFree={isFree} markup={markup} onDrop={this.onDrop.bind(this, i, j)}/>\r\n  }\r\n  getMarkup(code, i, j){\r\n    const classes = [],\r\n          isBlack = i%2 ? (j+1)%2 : j%2;\r\n\r\n    classes.push(isBlack ? 'black' : 'white');\r\n\r\n    if(typeof code === 'undefined') return classes;\r\n\r\n    const className = code.toUpperCase();\r\n\r\n    if(className !== ChessBoard.symbols.EMPTY_CELL) {\r\n        classes.push(className);\r\n    }\r\n    // As a rule white figures will end in 1 and black ones in 2\r\n    if(className.match(/1$/)) {\r\n      classes.push('withWhite');\r\n    }\r\n    if(className.match(/2$/)) {\r\n      classes.push('withBlack');\r\n    }\r\n    return classes;\r\n  }\r\n  onDrop(i, j, data) {\r\n    const props = this.props,\r\n          onDrop = props && props.onDrop;\r\n\r\n    onDrop && onDrop(i, j, data);\r\n  }\r\n  render () {\r\n    const children = [];\r\n    for(let i=0;i<10;i++) {\r\n      for(let j=0;j<10;j++) {\r\n        children.push(this.renderCell(i, j));\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"ChessBoard\">\r\n        {children}\r\n       </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ChessBoard;\r\n","import React from \"react\";\r\n\r\nexport default class Draggable extends React.Component {\r\n  onDragStart(event) {\r\n    const props = this.props;\r\n    event.dataTransfer && event.dataTransfer.setData(\"text\", props.transport);\r\n    props.onDragStart && props.onDragStart(event);\r\n  }\r\n  render(){\r\n    const {onDragStart, ...props} = this.props;\r\n    return <div onDragStart={this.onDragStart.bind(this)} draggable=\"true\" {...props}/>\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Layout.css';\r\nexport default class Layout extends React.Component {\r\n  render(){\r\n    const kids = React.Children.toArray(this.props.children),\r\n          c1 = kids[0],\r\n          c2 = kids[1],\r\n          c3 = kids[2],\r\n          c4 = kids[3],\r\n          c5 = kids[4];\r\n\r\n    return(\r\n      <div id=\"main\">\r\n        <div id=\"left\">{c1}</div>\r\n        <div id=\"right\">\r\n          <div id=\"top\">{c5}</div>\r\n          <div id=\"bottom\">{c2}{c3}{c4}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export const toCartezian = (s) => {\r\n  const pos = s.toLowerCase().split(\"\"),\r\n    alpha = \"abcdefgh\";\r\n  return [9 - parseInt(pos[1], 10), 1 + alpha.indexOf(pos[0])];\r\n}\r\nexport const toChess = (x, y) => {\r\n  const alpha = \"abcdefgh\".split(\"\");\r\n  return alpha[y - 1] + (9 - x);\r\n}\r\n","import React from \"react\";\r\nimport ChessBoard from \"./chessboard/ChessBoard\";\r\nimport Draggable from \"./Draggable\";\r\nimport Layout from \"./Layout\";\r\nimport {toChess, toCartezian} from \"./Utils\";\r\nimport \"./GameBoard.css\";\r\n\r\nclass GameBoard extends React.Component {\r\n  static strings = {\r\n    MSG_INITIAL: \"Drop the White Knight and the Dark Pawn over the chess table\",\r\n    MSG_PLEASE_WAIT: \"Please wait while we are calculating a path.\",\r\n    MSG_EXCEPTION: \"Something went wrong\",\r\n    MSG_DROP_THE_OTHER: \"Great job! Now drag the other one too.\",\r\n    MSG_START_ANIMATION:\r\n      \"Click the button to see how the Knight attacks the Pawn\",\r\n    MSG_KNIGHT_WALKING: \"Trop! Trop! Trop! (Knight walking sounds)\",\r\n    MSG_THE_END:\r\n      \"And the mighty White Knight ended his journey. Press the button to start over.\"\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ready: false,\r\n      finished: false,\r\n      knightPos: null,\r\n      pawnPos: null,\r\n      message: GameBoard.strings.MSG_INITIAL\r\n    };\r\n    this.animate = this.animate.bind(this);\r\n  }\r\n  generateTableData() {\r\n    let state = this.state,\r\n      pieces = [],\r\n      emptyRow = new Array(8),\r\n      emptyTable = new Array(8);\r\n\r\n    emptyRow.fill(ChessBoard.symbols.EMPTY_CELL, 0, 8);\r\n    emptyRow = emptyRow.join(ChessBoard.symbols.SEPARATOR);\r\n    emptyTable.fill(emptyRow, 0, 8);\r\n    if (!state) {\r\n      return emptyTable;\r\n    }\r\n\r\n    if (state.path) {\r\n      state.path.forEach(pos => {\r\n        pieces.push([ChessBoard.symbols.SELECTED_CELL, ...pos]);\r\n      });\r\n    }\r\n\r\n    if (state.pawnPos) {\r\n      pieces.push([ChessBoard.symbols.BLACK_PAWN, ...state.pawnPos]);\r\n    }\r\n\r\n    if (state.knightPos) {\r\n      pieces.push([ChessBoard.symbols.WHITE_QUEEN_KNIGHT, ...state.knightPos]);\r\n    }\r\n\r\n    return this.addPieces(pieces, emptyTable);\r\n  }\r\n  addPieces(pieces, data) {\r\n    const separator = ChessBoard.symbols.SEPARATOR;\r\n    let tmp = data.slice();\r\n\r\n    pieces.forEach(item => {\r\n      const symbol = item[0],\r\n        i = item[1] - 1,\r\n        j = item[2] - 1;\r\n      let row = tmp[i];\r\n\r\n      row = row.split(separator);\r\n      row[j] = symbol;\r\n      tmp[i] = row.join(separator);\r\n    });\r\n    return tmp;\r\n  }\r\n  animate() {\r\n    const state = this.state;\r\n    let path = state && state.path && state.path.slice(),\r\n      pawn = state && state.pawnPos,\r\n      busy = state && state.busy;\r\n\r\n    if (!busy) {\r\n      this.setState({\r\n        busy: true,\r\n        ready: false,\r\n        message: GameBoard.strings.MSG_KNIGHT_WALKING\r\n      });\r\n    }\r\n    // move on path\r\n    if (path && path.length) {\r\n      this.moveKnightTo(...path.shift()).then(() =>\r\n        this.setState(\r\n          {\r\n            path: path\r\n          },\r\n          () => setTimeout(() => this.animate(), 500)\r\n        )\r\n      );\r\n    } else if (pawn) {\r\n      // capture the pawn\r\n      this.moveKnightTo(...pawn).then(() =>\r\n        this.setState(\r\n          {\r\n            pawnPos: null\r\n          },\r\n          () => this.animate()\r\n        )\r\n      );\r\n    } else {\r\n      // finished\r\n      this.setState({\r\n        message: GameBoard.strings.MSG_THE_END,\r\n        finished: true\r\n      });\r\n    }\r\n  }\r\n  moveKnightTo(x0, y0) {\r\n    return new Promise((resolve, reject) => {\r\n      const state = this.state;\r\n      let dt = 250,\r\n        knight = state.knightPos,\r\n        x = knight[0],\r\n        y = knight[1];\r\n\r\n      let hasMoved = false;\r\n      // check x\r\n      if (x !== x0) {\r\n        x = x < x0 ? x + 1 : x - 1;\r\n        hasMoved = true;\r\n      }\r\n      // if not changed yet check y\r\n      if (!hasMoved && y !== y0) {\r\n        y = y < y0 ? y + 1 : y - 1;\r\n      }\r\n\r\n      // if not there yet go further\r\n      if (x !== x0 || y !== y0) {\r\n        setTimeout(() => resolve(this.moveKnightTo(x0, y0)), dt);\r\n      }\r\n      //update position => redraw\r\n      this.setState({\r\n        knightPos: [x, y]\r\n      });\r\n\r\n      //L finished\r\n      if (x === x0 && y === y0) {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n  reset() {\r\n    this.setState({\r\n      knightPos: null,\r\n      pawnPos: null,\r\n      path: null,\r\n      busy: null,\r\n      ready: null,\r\n      finished: null,\r\n      message: GameBoard.strings.MSG_INITIAL\r\n    });\r\n  }\r\n  onDrop(i, j, data) {\r\n    const changes = {};\r\n\r\n    changes[data] = [i, j];\r\n    this.setState(changes, () => this.checkPath());\r\n  }\r\n  checkPath() {\r\n    const state = this.state,\r\n      hasKnight = state && state.knightPos,\r\n      hasPawn = state && state.pawnPos;\r\n\r\n    let start, end;\r\n\r\n    if (hasKnight && hasPawn) {\r\n      start = toChess(...hasKnight);\r\n      end = toChess(...hasPawn);\r\n\r\n      this.setState({ message: GameBoard.strings.MSG_PLEASE_WAIT });\r\n\r\n      this.fetchPath(start, end)\r\n        .then(response => response.json())\r\n        .then(response => this.drawPath(JSON.parse(response)))\r\n        .catch(err =>\r\n          this.setState({\r\n            message: GameBoard.strings.MSG_EXCEPTION,\r\n            finished: true\r\n          })\r\n        );\r\n    } else {\r\n      this.setState({\r\n        message: GameBoard.strings.MSG_DROP_THE_OTHER\r\n      });\r\n    }\r\n  }\r\n  fetchPath(start, end) {\r\n    const url = `https://v86wed9i20.execute-api.eu-west-1.amazonaws.com/public/knight-path?start=${start}&end=${end}`,\r\n      request = new Request(url);\r\n\r\n    return fetch(request);\r\n  }\r\n  drawPath(path) {\r\n    let coords = path;\r\n    coords.pop();\r\n    coords.shift();\r\n    coords = coords.map(s => toCartezian(s));\r\n\r\n    this.setState({\r\n      path: coords,\r\n      ready: true,\r\n      message: GameBoard.strings.MSG_START_ANIMATION\r\n    });\r\n  }\r\n  render() {\r\n    const state = this.state,\r\n      message = state && state.message,\r\n      hasKnight = state && state.knightPos,\r\n      hasPawn = state && state.pawnPos,\r\n      isBusy = state && state.busy,\r\n      isReady = state && state.ready,\r\n      isFinished = state && state.finished,\r\n      data = this.generateTableData();\r\n\r\n    return (\r\n      <Layout>\r\n        <ChessBoard data={data} onDrop={this.onDrop.bind(this)} />\r\n        <div>\r\n        {!hasKnight && !isBusy && (\r\n          <Draggable transport=\"knightPos\" className=\"QN1 big withWhite\" />\r\n        )}\r\n        </div>\r\n        <div>\r\n        {!hasPawn && !isBusy && (\r\n          <Draggable transport=\"pawnPos\" className=\"big P2 withBlack\" />\r\n        )}\r\n        </div>\r\n        <div>\r\n        {isReady && (\r\n          <input\r\n            type=\"button\"\r\n            className=\"bigBtn\"\r\n            value=\"Go\"\r\n            onClick={this.animate}\r\n          />\r\n        )}\r\n        {isFinished && (\r\n          <input\r\n            className=\"bigBtn\"\r\n            type=\"button\"\r\n            value=\"Start Over\"\r\n            onClick={this.reset.bind(this)}\r\n          />\r\n        )}\r\n        </div>\r\n        <div className=\"info\">{message}</div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default GameBoard;\r\n","import React, { Component } from 'react';\nimport GameBoard from './components/GameBoard';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <GameBoard />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}